import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configuración para que los gráficos se vean mejor
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 7) # Tamaño de gráfico ajustado para más claridad

def generar_evolucion_anual(evolucion_anual):
    # 1. Gráfico de Líneas para la Evolución Anual
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=evolucion_anual, x='Año', y='Total de Turistas', marker='o', color='#2ecc71', linewidth=3)
    plt.title('1. Evolución Anual del Número Total de Turistas en Costa Rica', fontsize=16)
    plt.xlabel('Año')
    plt.ylabel('Total de Turistas')
    plt.xticks(evolucion_anual['Año'])
    plt.grid(True, axis='y')
    plt.show()

def generar_grafico_barras(paises_principales):
    # 2. Gráfico de Barras para las Nacionalidades
    plt.figure(figsize=(12, 6))
    # Usamos 'Total de Turistas' que fue renombrado en la Celda 2
    sns.barplot(x='Total de Turistas', y='Nacionalidad', data=paises_principales, palette='viridis')
    plt.title('2. Top 5 Países que más Turistas envían a Costa Rica', fontsize=16)
    plt.xlabel('Total de Llegadas')
    plt.ylabel('Nacionalidad')
    plt.show()

def generar_grafico_estacionalidad(estacionalidad):
        # 3. Gráfico de Barras para la Estacionalidad
    nombres_meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
    estacionalidad['Nombre_Mes'] = estacionalidad['Mes'].apply(lambda x: nombres_meses[x-1])

    plt.figure(figsize=(12, 6))
    # Colorear los meses pico (ej. Diciembre, Enero, Febrero, Julio)
    colores_estac = ['#3498db'] * 12
    for mes_num in [1, 2, 7, 12]:
        colores_estac[mes_num-1] = '#e74c3c' # Rojo para meses pico

    sns.barplot(x='Nombre_Mes', y='Promedio Mensual de Llegadas', data=estacionalidad, palette=colores_estac)
    plt.title('3. Promedio Mensual de Llegadas (Estacionalidad)', fontsize=16)
    plt.xlabel('Mes')
    plt.ylabel('Promedio de Llegadas')
    plt.show()

def generar_puntos_de_entrada(puntos_entrada_uso):
    # 4. Gráfico de Barras para Puntos de Entrada
    plt.figure(figsize=(12, 6))
    # Usamos 'Total de Llegadas' que fue renombrado en la Celda 2
    sns.barplot(x='Total de Llegadas', y='Punto de Entrada', data=puntos_entrada_uso, palette='cividis')
    plt.title('4. Uso de Puntos de Entrada (Aeropuertos y Fronteras)', fontsize=16)
    plt.xlabel('Total de Turistas')
    plt.ylabel('Punto de Entrada')
    plt.show()

# --- CARGA DE DATOS OFICIALES REALES ---


NOMBRE_ARCHIVO = 'datos_reales_ict.xlsx' 
try:
    if NOMBRE_ARCHIVO.endswith('.csv'):
        df = pd.read_csv(NOMBRE_ARCHIVO)
    elif NOMBRE_ARCHIVO.endswith(('.xls', '.xlsx')):
        # Carga desde Excel
        df = pd.read_excel(NOMBRE_ARCHIVO) 
    else:
        print("Formato de archivo no soportado. Debe ser CSV o Excel.")
        # Usamos datos simulados como respaldo si no se encuentra el archivo
        raise FileNotFoundError 

    print(f"--- DataFrame de Datos Oficiales '{NOMBRE_ARCHIVO}' Cargado ---")
    

    
    if 'Año' in df.columns and 'Mes' in df.columns:
        # Crea la columna Fecha usando Año, Mes y el día 01
        df['Fecha'] = pd.to_datetime(df['Año'].astype(str) + '-' + df['Mes'].astype(str) + '-01')
    
    # Conversiones finales necesarias
    df['Llegadas'] = pd.to_numeric(df['Llegadas'], errors='coerce').fillna(0).astype(int)
    
    # Se añade la columna 'Mes' al DataFrame final para la Estacionalidad
    df['Mes'] = df['Fecha'].dt.month 
    
    df.sort_values(by='Fecha', inplace=True)

    print(f"Columnas finales del DataFrame: {list(df.columns)}")
    print(df.head())
    print(f"\nNúmero total de registros: {len(df)}")

except FileNotFoundError:

    print("ADVERTENCIA: Archivo oficial no encontrado. Creando datos simulados para la demostración.")
    
    nacionalidades = ['USA', 'Canadá', 'Alemania', 'Francia', 'España', 'México', 'Reino Unido']
    puntos_entrada = ['Aeropuerto Internacional Juan Santamaría', 'Aeropuerto Internacional Daniel Oduber Quirós', 'Frontera Peñas Blancas', 'Frontera Paso Canoas']
    años = [2022, 2023, 2024, 2025]
    meses = range(1, 13)

    datos = []
    for año in años:
        for mes in meses:
            for _ in range(30):
                datos.append({
                    'Fecha': pd.to_datetime(f'{año}-{mes:02d}-01'),
                    'Nacionalidad': np.random.choice(nacionalidades),
                    'Llegadas': np.random.randint(50, 500) * (1 + (año - 2020) * 0.2),
                    'Punto de Entrada': np.random.choice(puntos_entrada)
                })
    df = pd.DataFrame(datos)
    df['Llegadas'] = df['Llegadas'].astype(int)
    df['Mes'] = df['Fecha'].dt.month
    df.sort_values(by='Fecha', inplace=True)
    
    print("--- DataFrame de Datos Simulados Creado ---")
    print(df.head())
    print(f"\nNúmero total de registros: {len(df)}")
    
    
    # --- ANÁLISIS DESCRIPTIVO ---

print("\n" + "="*70)
print("             RESULTADOS DEL ANÁLISIS DESCRIPTIVO")
print("="*70)

# 1. Evolución del número de turistas a lo largo de los años (Tendencia Anual)
evolucion_anual = df.groupby(df['Fecha'].dt.year)['Llegadas'].sum().reset_index()
evolucion_anual.columns = ['Año', 'Total de Turistas']
print("\n## 1. Evolución Anual del Número de Turistas:")
print(evolucion_anual)

# 2. Países que más turistas envían (Perfil del Visitante)
paises_principales = df.groupby('Nacionalidad')['Llegadas'].sum().nlargest(5).reset_index()

paises_principales.columns = ['Nacionalidad', 'Total de Turistas']
print("\n## 2. Top 5 Países de Origen:")
print(paises_principales)

# 3. Existencia de temporadas altas y bajas (Estacionalidad)
estacionalidad = df.groupby('Mes')['Llegadas'].mean().reset_index()
estacionalidad.columns = ['Mes', 'Promedio Mensual de Llegadas']
estacionalidad_ordenada = estacionalidad.sort_values(by='Promedio Mensual de Llegadas', ascending=False)
print("\n## 3. Estacionalidad (Promedio Mensual de Llegadas):")
print(estacionalidad_ordenada)

# 4. Aeropuertos o fronteras terrestres más utilizados (Puntos de Entrada)
puntos_entrada_uso = df.groupby('Punto de Entrada')['Llegadas'].sum().sort_values(ascending=False).reset_index()

puntos_entrada_uso.columns = ['Punto de Entrada', 'Total de Llegadas']
print("\n## 4. Puntos de Entrada más Utilizados:")
print(puntos_entrada_uso)


# --- VISUALIZACIÓN DE DATOS ---

print("\n" + "="*70)
print("             GENERACIÓN DE GRÁFICOS")
print("="*70)


#HAcer menu:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sys # Para salir del programa de forma limpia

# Configuración de estilo
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 7)

# Variables globales para almacenar los resultados del análisis
evolucion_anual = pd.DataFrame()
paises_principales = pd.DataFrame()
estacionalidad = pd.DataFrame()
puntos_entrada_uso = pd.DataFrame()
df = pd.DataFrame()

# ----------------------------------------------------------------------
# 1. FUNCIÓN DE CARGA DE DATOS (Se ejecuta al inicio)
# ----------------------------------------------------------------------

def cargar_datos():
    """Carga los datos reales o genera datos simulados si falla la carga."""
    global df
    NOMBRE_ARCHIVO = 'datos_reales_ict.xlsx' # ¡AJUSTA ESTO!

    try:
        if NOMBRE_ARCHIVO.endswith('.csv'):
            df = pd.read_csv(NOMBRE_ARCHIVO)
        elif NOMBRE_ARCHIVO.endswith(('.xls', '.xlsx')):
            df = pd.read_excel(NOMBRE_ARCHIVO) 
        else:
            raise ValueError("Formato de archivo no soportado.")

        print(f"\n✅ Datos oficiales de '{NOMBRE_ARCHIVO}' cargados con éxito.")

        # --- TAREAS DE LIMPIEZA Y NORMALIZACIÓN (Adaptar si es necesario) ---
        
        # Asumiendo que ya se renombraron las columnas para coincidir con el proyecto
        
        if 'Año' in df.columns and 'Mes' in df.columns:
            df['Fecha'] = pd.to_datetime(df['Año'].astype(str) + '-' + df['Mes'].astype(str) + '-01')
        elif 'Fecha' in df.columns:
             df['Fecha'] = pd.to_datetime(df['Fecha'])
        else:
            print("ERROR: Columna 'Fecha' o combinación 'Año/Mes' no encontrada.")
            raise Exception("Faltan columnas de fecha.")
        
        df['Llegadas'] = pd.to_numeric(df['Llegadas'], errors='coerce').fillna(0).astype(int)
        df['Mes'] = df['Fecha'].dt.month 
        df.sort_values(by='Fecha', inplace=True)
        
        print(f"Número total de registros: {len(df)}")

    except (FileNotFoundError, ValueError, Exception) as e:
        print(f"\n⚠️ ERROR al cargar el archivo ({e}). Generando datos simulados para continuar...")
        
        # --- GENERACIÓN DE DATOS SIMULADOS (Respaldo) ---
        np.random.seed(42)
        nacionalidades = ['USA', 'Canadá', 'Alemania', 'Francia', 'España', 'México', 'Reino Unido']
        puntos_entrada = ['Aeropuerto Internacional Juan Santamaría', 'Aeropuerto Internacional Daniel Oduber Quirós', 'Frontera Peñas Blancas', 'Frontera Paso Canoas']
        años = [2020, 2021, 2022, 2023]
        
        datos = []
        for año in años:
            for mes in range(1, 13):
                for _ in range(30):
                    datos.append({
                        'Fecha': pd.to_datetime(f'{año}-{mes:02d}-01'),
                        'Nacionalidad': np.random.choice(nacionalidades),
                        'Llegadas': np.random.randint(50, 500) * (1 + (año - 2020) * 0.2),
                        'Punto de Entrada': np.random.choice(puntos_entrada)
                    })
        df = pd.DataFrame(datos)
        df['Llegadas'] = df['Llegadas'].astype(int)
        df['Mes'] = df['Fecha'].dt.month
        df.sort_values(by='Fecha', inplace=True)
        print("✅ Datos Simulados Generados y Listos para el Análisis.")

# ----------------------------------------------------------------------
# 2. FUNCIÓN DE CÁLCULOS (Se ejecuta una sola vez al inicio)
# ----------------------------------------------------------------------

def realizar_calculos():
    """Realiza todos los cálculos descriptivos y los guarda en variables globales."""
    global evolucion_anual, paises_principales, estacionalidad, puntos_entrada_uso
    
    # 1. Evolución Anual
    evolucion_anual = df.groupby(df['Fecha'].dt.year)['Llegadas'].sum().reset_index()
    evolucion_anual.columns = ['Año', 'Total de Turistas']

    # 2. Países Principales
    paises_principales = df.groupby('Nacionalidad')['Llegadas'].sum().nlargest(5).reset_index()
    paises_principales.columns = ['Nacionalidad', 'Total de Turistas']

    # 3. Estacionalidad
    estacionalidad = df.groupby('Mes')['Llegadas'].mean().reset_index()
    estacionalidad.columns = ['Mes', 'Promedio Mensual de Llegadas']

    # 4. Puntos de Entrada
    puntos_entrada_uso = df.groupby('Punto de Entrada')['Llegadas'].sum().sort_values(ascending=False).reset_index()
    puntos_entrada_uso.columns = ['Punto de Entrada', 'Total de Llegadas']
    
    print("\n✅ Cálculos de análisis completados.")


# ----------------------------------------------------------------------
# 3. FUNCIONES DE VISUALIZACIÓN
# ----------------------------------------------------------------------

def mostrar_evolucion_anual():
    """Muestra la tabla y el gráfico de la evolución anual."""
    print("\n" + "-"*50)
    print("ANALISIS 1: EVOLUCIÓN ANUAL DE TURISTAS")
    print("-" * 50)
    print(evolucion_anual)
    
    plt.figure(figsize=(10, 5))
    sns.lineplot(data=evolucion_anual, x='Año', y='Total de Turistas', marker='o', color='#2ecc71', linewidth=3)
    plt.title('Evolución Anual del Número Total de Turistas en Costa Rica', fontsize=16)
    plt.xlabel('Año')
    plt.ylabel('Total de Turistas')
    plt.xticks(evolucion_anual['Año'].unique())
    plt.show()

def mostrar_top_paises():
    """Muestra la tabla y el gráfico de los principales países de origen."""
    print("\n" + "-"*50)
    print("ANALISIS 2: TOP 5 PAÍSES DE ORIGEN")
    print("-" * 50)
    print(paises_principales)
    
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Total de Turistas', y='Nacionalidad', data=paises_principales, palette='viridis')
    plt.title('Top 5 Países que más Turistas envían a Costa Rica', fontsize=16)
    plt.xlabel('Total de Llegadas')
    plt.ylabel('Nacionalidad')
    plt.show()

def mostrar_estacionalidad():
    """Muestra la tabla y el gráfico de la estacionalidad."""
    print("\n" + "-"*50)
    print("ANALISIS 3: ESTACIONALIDAD (PROMEDIO MENSUAL)")
    print("-" * 50)
    print(estacionalidad.sort_values(by='Promedio Mensual de Llegadas', ascending=False)) # Mostrar ordenada
    
    nombres_meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
    estacionalidad['Nombre_Mes'] = estacionalidad['Mes'].apply(lambda x: nombres_meses[x-1])

    plt.figure(figsize=(10, 6))
    colores_estac = ['#3498db'] * 12
    for mes_num in estacionalidad.nlargest(3, 'Promedio Mensual de Llegadas')['Mes']:
        colores_estac[mes_num-1] = '#e74c3c' # Rojo para los 3 meses pico

    sns.barplot(x='Nombre_Mes', y='Promedio Mensual de Llegadas', data=estacionalidad, palette=colores_estac)
    plt.title('Promedio Mensual de Llegadas (Estacionalidad)', fontsize=16)
    plt.xlabel('Mes')
    plt.ylabel('Promedio de Llegadas')
    plt.show()

def mostrar_puntos_entrada():
    """Muestra la tabla y el gráfico de los puntos de entrada."""
    print("\n" + "-"*50)
    print("ANALISIS 4: PUNTOS DE ENTRADA MÁS UTILIZADOS")
    print("-" * 50)
    print(puntos_entrada_uso)
    
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Total de Llegadas', y='Punto de Entrada', data=puntos_entrada_uso, palette='cividis')
    plt.title('Uso de Puntos de Entrada (Aeropuertos y Fronteras)', fontsize=16)
    plt.xlabel('Total de Turistas')
    plt.ylabel('Punto de Entrada')
    plt.show()


# ----------------------------------------------------------------------
# 4. FUNCIÓN PRINCIPAL DEL MENÚ
# ----------------------------------------------------------------------

def mostrar_menu():
    """Muestra el menú de opciones al usuario."""
    print("\n" + "="*50)
    print("         MENÚ DE ANÁLISIS DE TURISMO C.R.")
    print("="*50)
    print("1. Mostrar Evolución Anual (Tendencia)")
    print("2. Mostrar Top 5 Países de Origen (Perfil)")
    print("3. Mostrar Estacionalidad (Temporadas Altas/Bajas)")
    print("4. Mostrar Puntos de Entrada más Usados")
    print("5. Mostrar TODOS los gráficos")
    print("0. Salir del Programa")
    print("-" * 50)

def main():
    """Función principal que ejecuta la carga, los cálculos y el bucle del menú."""
    
    # 1. Cargar datos (puede ser real o simulado)
    cargar_datos()
    
    # Si el DataFrame está vacío después de la carga/simulación, salimos.
    if df.empty:
        print("ERROR CRÍTICO: No se pudieron cargar o generar datos. Saliendo.")
        sys.exit()
    
    # 2. Realizar todos los cálculos de una sola vez
    realizar_calculos()
    
    # 3. Bucle del menú
    while True:
        mostrar_menu()
        opcion = input("Seleccione una opción (0-5): ").strip()
        
        if opcion == '1':
            mostrar_evolucion_anual()
        elif opcion == '2':
            mostrar_top_paises()
        elif opcion == '3':
            mostrar_estacionalidad()
        elif opcion == '4':
            mostrar_puntos_entrada()
        elif opcion == '5':
            print("\n--- MOSTRANDO TODOS LOS GRÁFICOS ---")
            mostrar_evolucion_anual()
            mostrar_top_paises()
            mostrar_estacionalidad()
            mostrar_puntos_entrada()
        elif opcion == '0':
            print("\n👋 ¡Gracias por usar el Analizador de Turismo de Costa Rica! Saliendo...")
            sys.exit()
        else:
            print("\n❌ Opción no válida. Por favor, ingrese un número del 0 al 5.")

# Ejecutar el programa principal
if __name__ == "__main__":
    main()




# Llamadas a las funciones de generación de gráficos

generar_evolucion_anual(evolucion_anual)

generar_grafico_barras(paises_principales)

generar_grafico_estacionalidad(estacionalidad)

generar_puntos_de_entrada(puntos_entrada_uso)

